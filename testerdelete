


<html>
<head><title>Example</title>
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.1/dist/leaflet.css" />
	<script src="https://unpkg.com/leaflet@1.0.1/dist/leaflet-src.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
</head>
<style>
#map        { width: 70%; height: 95%; float: left; }
</style>
Select on click within 150 miles.
<div id="map"></div>
<script>

var url = "https://raw.githubusercontent.com/al-1222/al-1222-web/master/cafe.geojson";
//Defining variables for the selected points, circle, and click marker
var theMarker;
var theCircle;
var geojsonLayer;
var selectedIcon =  L.icon({
      iconUrl: "./building-24.svg",
      iconSize:[20,20]
    });

		var map = L.map('map').setView([39.918, 116.427], 65);

	var osm=new L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png',{
				attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'}).addTo(map);

   var promise = $.getJSON(url);
    promise.then(function(data) {

        sites = L.geoJson(data, {

            pointToLayer: function(feature, latlng) {
				return L.icon(latlng, {{icon:selectedIcon}
				radius: 4, //expressed in pixels circle size
				color: "black",
				stroke: true,
				weight: 7,		//outline width  increased width to look like a filled circle.
				fillOpcaity: 1
				});
				}
        });

        map.fitBounds(sites.getBounds(), {padding: [30, 30]});
        sites.addTo(map)

		//layer control
			var baseMaps = {
				'Open StreetMap':osm
			};

		var overlayMaps = {
		"Vendors":sites
	};
		L.control.layers(baseMaps, overlayMaps).addTo(map);
		});

  map.on('click',function(e){
	lat = e.latlng.lat;
	lon = e.latlng.lng;

	console.log("You clicked the map at LAT: "+ lat+" and LONG: "+lon );
		//Clear existing marker, circle, and selected points if selecting new points
		if (theCircle != undefined) {
		  map.removeLayer(theCircle);
		};
		if (theMarker != undefined) {
			  map.removeLayer(theMarker);
		};
		if (geojsonLayer != undefined) {
			  map.removeLayer(geojsonLayer);
		};

	//Add a marker to show where you clicked.
	 theMarker = L.marker([lat,lon]).addTo(map);  //Note: if lat/lon are strings then use parseFloat(lat), parseFloat(lon)
	SelectPoints(lat,lon)

});

	var selPts = [];

	function SelectPoints(lat,lon){
		xy = [lat,lon];  //center point of circle
		dist = 0.8;  // 150 miles,
		var theRadius = dist * 1609.34  //1609.34 meters in a mile

		selPts.length =0;  //Reset the array if selecting new points

		sites.eachLayer(function (layer) {
			// Lat, long of current point as it loops through.
			layer_lat_long = layer.getLatLng();

			// Distance from our circle marker To current point in meters
			distance_from_centerPoint = layer_lat_long.distanceTo(xy);

			// See if meters is within radius, add the to array
			if (distance_from_centerPoint <= theRadius) {
				 selPts.push(layer.feature);
			}
		});

		// draw circle to see the selection area
		theCircle = L.circle(xy, theRadius , {   /// Number is in Meters
		  color: 'orange',
		  fillOpacity: 0,
		  opacity: 1
		}).addTo(map);



		//Symbolize the Selected Points
			 geojsonLayer = L.geoJson(selPts, {

				pointToLayer: function(feature, latlng) {
					return L.circleMarker(latlng, {
					radius: 4, //expressed in pixels circle size
					color: "green",
					stroke: true,
					weight: 7,		//outline width  increased width to look like a filled circle.
					fillOpcaity: 1
					});
					}
			});
			//Add selected points back into map as green circles.
			map.addLayer(geojsonLayer);

			//Take array of features and make a GeoJSON feature collection
			var GeoJS = { type: "FeatureCollection",  features: selPts   };
			//Show number of selected features.
			console.log(GeoJS.features.length +" Selected features");
			 // show selected GEOJSON data in console
			console.log(JSON.stringify(GeoJS));
	}	//end of SelectPoints function

</script>
</body>
</html>
